import{_ as a,r as o,o as s,c as r,a as e,b as t,d as c}from"./app-5412e4fd.js";const i={},_=e("h1",{id:"rabbitmq介绍",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#rabbitmq介绍","aria-hidden":"true"},"#"),t(" RabbitMQ介绍")],-1),l={href:"https://itbaima.net/document",target:"_blank",rel:"noopener noreferrer"},d=e("p",null,"经过前面的学习，我们已经了解了我们之前的技术在分布式环境下的应用，接着我们来看最后一章的内容。",-1),h=e("p",null,"那么，什么是消息队列呢？",-1),m=e("p",null,"我们之前如果需要进行远程调用，那么一般可以通过发送HTTP请求来完成，而现在，我们可以使用第二种方式，就是消息队列，它能够将发送方发送的信息放入队列中，当新的消息入队时，会通知接收方进行处理，一般消息发送方称为生产者，接收方称为消费者。",-1),p=e("p",null,[e("img",{src:"https://fast.itbaima.net/2023/03/08/yknBVt2jGgFSTO8.jpg",alt:"image-20220415165805716"})],-1),u=e("p",null,"这样我们所有的请求，都可以直接丢到消息队列中，再由消费者取出，不再是直接连接消费者的形式了，而是加了一个中间商，这也是一种很好的解耦方案，并且在高并发的情况下，由于消费者能力有限，消息队列也能起到一个削峰填谷的作用，堆积一部分的请求，再由消费者来慢慢处理，而不会像直接调用那样请求蜂拥而至。",-1);function b(f,x){const n=o("ExternalLinkIcon");return s(),r("div",null,[_,e("p",null,[e("a",l,[t("内容来源于itbaima"),c(n)])]),d,h,m,p,u])}const g=a(i,[["render",b],["__file","a.html.vue"]]);export{g as default};
