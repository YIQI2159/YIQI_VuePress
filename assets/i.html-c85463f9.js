import{_ as n,o as s,c as a,e as t}from"./app-5412e4fd.js";const p={},e=t(`<h1 id="主题模式" tabindex="-1"><a class="header-anchor" href="#主题模式" aria-hidden="true">#</a> 主题模式</h1><p>实际上这种模式就是一种模糊匹配的模式，我们可以将<code>routingKey</code>以模糊匹配的方式去进行转发。</p><p><img src="https://fast.itbaima.net/2023/03/08/z45gI7UaKmCipEL.jpg" alt="image-20220420233721239"></p><p>我们可以使用<code>*</code>或<code>#</code>来表示：</p><ul><li>* - 表示任意的一个单词</li><li># - 表示0个或多个单词</li></ul><p>这里我们来测试一下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;topicExchange&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//这里使用预置的Topic类型交换机</span>
    <span class="token keyword">public</span> <span class="token class-name">Exchange</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ExchangeBuilder</span><span class="token punctuation">.</span><span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token string">&quot;amq.topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">nonDurable</span><span class="token punctuation">(</span><span class="token string">&quot;yyds&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;binding&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;topicExchange&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Exchange</span> exchange<span class="token punctuation">,</span>
                           <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;yydsQueue&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span>
                <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;*.test.*&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动项目，可以看到只要是满足通配符条件的都可以成功转发到对应的消息队列：</p><p><img src="https://fast.itbaima.net/2023/03/08/aS37QitoUdf4FZ9.jpg" alt="image-20220421103753962"></p><p>接着我们可以再试试看<code>#</code>通配符。</p><p>除了我们这里使用的默认主题交换机之外，还有一个叫做<code>amq.rabbitmq.trace</code>的交换机：</p><p><img src="https://fast.itbaima.net/2023/03/08/CWfRIwoYLjQrbpH.jpg" alt="image-20220421104035463"></p><p>可以看到它也是<code>topic</code>类型的，那么这个交换机是做什么的呢？实际上这是用于帮助我们记录和追踪生产者和消费者使用消息队列的交换机，它是一个内部的交换机，那么如果使用呢？首先创建一个消息队列用于接收记录：</p><p><img src="https://fast.itbaima.net/2023/03/08/s7B38pjkd4EGFLI.jpg" alt="image-20220421104619325"></p><p>接着我们需要在控制台将虚拟主机<code>/test</code>的追踪功能开启：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> rabbitmqctl trace_on <span class="token parameter variable">-p</span> /test
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>开启后，我们将此队列绑定到上面的交换机上：</p><p><img src="https://fast.itbaima.net/2023/03/08/VsD2dYIpHhbt6R9.jpg" alt="image-20220421104843224"></p><p><img src="https://fast.itbaima.net/2023/03/08/EM4WKHqtyz3vLSk.jpg" alt="image-20220421105141144"></p><p>由于发送到此交换机上的<code>routingKey</code>为routing key为 publish.交换机名称 和 deliver.队列名称，分别对应生产者投递到交换机的消息，和消费者从队列上获取的消息，因此这里使用<code>#</code>通配符进行绑定。</p><p>现在我们来测试一下，比如还是往yyds队列发送消息：</p><p><img src="https://fast.itbaima.net/2023/03/08/vHKPqJFahV8y7l3.jpg" alt="image-20220421105242770"></p><p>可以看到在发送消息，并且消费者已经处理之后，<code>trace</code>队列中新增了两条消息，那么我们来看看都是些什么消息：</p><p><img src="https://fast.itbaima.net/2023/03/08/vHKPqJFahV8y7l3.jpg" alt="image-20220421105528532"></p><p>通过追踪，我们可以很明确地得知消息发送的交换机、routingKey、用户等信息，包括信息本身，同样的，消费者在取出数据时也有记录：</p><p><img src="https://fast.itbaima.net/2023/03/08/NApBodythmfjzMV.jpg" alt="image-20220421105638715"></p><p>我们可以明确消费者的地址、端口、具体操作的队列以及取出的消息信息等。</p><p>到这里，我们就已经了解了3种类型的交换机。</p>`,28),c=[e];function i(o,u){return s(),a("div",null,c)}const d=n(p,[["render",i],["__file","i.html.vue"]]);export{d as default};
